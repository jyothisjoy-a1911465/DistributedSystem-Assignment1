# Java RMI Calculator Project
# About 
This project implements a simple Java RMI (Remote Method Invocation) application, where each client interacts with its own stack on the server. The project includes the server-side implementation, client-side implementation


## Project Structure

- **Calculator.java**
- **CalculatorImplementation.java**
- **CalculatorServer.java**
- **CalculatorClient.java**


## Features

- **Client-Specific Stacks**: Each client has its own stack on the server, ensuring isolated operations.
- **Supported Operations**:
  - `min`: Computes the minimum value from the stack.
  - `max`: Computes the maximum value from the stack.
  - `lcm`: Computes the Least Common Multiple (LCM) of the values in the stack.
  - `gcd`: Computes the Greatest Common Divisor (GCD) of the values in the stack.
  - `pop`: Removes and returns the top value of the stack.
  - `delayPop`: Removes and returns the top value after a specified delay.

## Terminal Setup(How to run)

1. **Compile the Java Files**:
    ```bash
    javac *.java
    ```

2. **Start the RMI Registry**:
    ```bash
    rmiregistry &
    ```

3. **Run the Server**:
    ```bash
    java CalculatorServer
    ```

4. **Run the Client**:
    ```bash
    java CalculatorClient
    ```


## What each java files have?


1. **Calculator.java**:

We have the import statements ,then we declares the interface, which further have the method definitions
> pushValue = help to push the element into the stack
> pushOperations = help to perform the string operations like the lcm,gcd,min ,max thats being assigned as the tasks
> pop = here the pop method is used pop the top value thats present in the 
> isEmpty = This is used to check whether the stack is empty or the time of the method is called 
> delayPop = this is used to delay th epo operation thats bein the test cases thats being performed by the client


2. **CalculatorImplementation.java**:

 Here its actually responsible to provide the functionality to all the methods that we have declared in the calculator.java file 
 > the clientstacks is a hash map that maps to the clientid and the stack integer that holds all the integer values that are being pushed by the client
 > Constructor initializes the hashmap
 > getclientstack is used to get the stack that is specified clent
 >the pushvalue,pushoperation,pop,isempty,delaypop are being explained here for the operations
 > the methods to handle lcm and gcd are being explained here 


3. **CalculatorServer.java**:

This is basically responsible for setting up the RMI which actually host the calculator,creates  an instance and registers it with the registry and makes it available to all the clients to access remotely
> class defined with an empty constructor
>main method the process beginsand it initializes the server and create necessary objects and bind them to the RMI registry
>instance of the implementation is created -provides the actual functionality for the remote methods
>exportobject method of unicastremoteobject is used to make the object available to recieve incoming methods calls
>by calling the rmiregistry command we start the rmi seperately 
>remote object stub is bound to rmi registry
>once the server is ready we will be printing the server ready message 
>at the same part we are also checking the exceptions coming up if any failure cases the exception will be called.


 
3. **CalculatorClient.java**:

This is responsible for interacting with the remote calculator hosted by the RMI it then connects to the rmi registry retrives the remote Calculator and then perform various operations

> Class declaration,mention the client id which is used to manage the operations run on th eserver
> We need to connect this to the rmi registry allowing to incoke the methods if it was a local object
>Performing multiple operations (each 1 test cases)
> Ends the test cases with the exceptions



# Sample outputs of server and client side


>>>>>>>>>server

(base) jyothisjoy@jyothiss-MacBook-Air calculator % javac *.java
(base) jyothisjoy@jyothiss-MacBook-Air calculator % rmiregistry &
[1] 15475
(base) jyothisjoy@jyothiss-MacBook-Air calculator % WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by sun.rmi.registry.RegistryImpl
WARNING: Please consider reporting this to the maintainers of sun.rmi.registry.RegistryImpl
WARNING: System::setSecurityManager will be removed in a future release
java CalculatorServer
Server ready

>>>>>>>>>>>>>Client

(base) jyothisjoy@jyothiss-MacBook-Air calculator % java CalculatorClient
Testing min operation
Expected min result: 5, Actual: 5
Testing min operation with one value
Expected min result: 42, Actual: 42
Expected exception caught for popping from an empty stack: java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
        java.rmi.RemoteException: Stack is empty
Expected exception caught for invalid operation: java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
        java.rmi.RemoteException: Invalid operator
Testing LCM operation with one value
Expected LCM result: 13, Actual: 13
Testing GCD operation with identical values
Expected GCD result: 9, Actual: 9
Testing delayPop with 2 seconds delay
Is stack empty? true
All tests completed successfully.
(base) jyothisjoy@jyothiss-MacBook-Air calculator % 

